@model Etch.OrchardCore.Fields.ResponsiveMedia.Settings.ResponsiveMediaFieldSettings

@if (Model.IsConfigured)
{
<script asp-src="~/OrchardCore.Media/Scripts/media.js" asp-name="media" at="Foot" depends-on="admin, vuejs, sortable, vuedraggable, jQuery-ui"></script>
<style asp-src="~/OrchardCore.Media/Styles/media.min.css" debug-src="~/OrchardCore.Media/Styles/media.css"></style>
<script asp-src="https://vuejs.org/js/vue.min.js" debug-src="https://vuejs.org/js/vue.js" asp-name="vuejs" at="Foot"></script>
<script asp-src="https://cdn.jsdelivr.net/sortable/1.4.2/Sortable.min.js" debug-src="https://cdn.jsdelivr.net/sortable/1.4.2/Sortable.js" asp-name="sortable" at="Foot"></script>
<script asp-src="https://cdnjs.cloudflare.com/ajax/libs/Vue.Draggable/2.14.1/vuedraggable.min.js" debug-src="https://cdnjs.cloudflare.com/ajax/libs/Vue.Draggable/2.14.1/vuedraggable.js" asp-name="vuedraggable" depends-on="vuejs, sortable" at="Foot"></script>

<script asp-src="~/Etch.OrchardCore.Fields/Scripts/responsiveMedia/admin.js" asp-name="responsiveMedia" depends-on="jquery" at="Foot"></script>

<script at="Foot">
initializeMediaApplication(false, '@Url.Action("MediaApplication", "Admin", new { area = "OrchardCore.Media" })');
initializeResponsiveMediaEditor(document.getElementById('@Html.IdFor(m => m)'), document.getElementById('@Html.IdFor(m => m)-ModalBody'), @(Newtonsoft.Json.JsonConvert.SerializeObject(Model.GetBreakpoints())), @(Model.Multiple ? "true" : "false"));
</script>}

<div class="mb-3">
    <div class="w-md-50 pe-md-3">
        <label asp-for="Breakpoints">@T["Breakpoints"]</label>
        <input type="text" asp-for="Breakpoints" class="form-control" value="@string.Join(",", Model.Breakpoints)" />
        <span class="hint">@T["Comma separated list of breakpoints (e.g. \"200, 400, 600\")."]</span>
    </div>
</div>

<div class="mb-3 col-md-6">
    <div class="form-check">
        <input type="checkbox" class="form-check-input" asp-for="Required" checked="@Model.Required">
        <label class="form-check-label" asp-for="Required">@T["Required"]</label>
        <span class="hint">@T["Whether a media is required."]</span>
    </div>
</div>

<div class="mb-3 col-md-6">
    <div class="form-check">
        <input type="checkbox" class="form-check-input" asp-for="Multiple" checked="@Model.Multiple">
        <label class="form-check-label" asp-for="Multiple">@T["Multiple"]</label>
        <span class="hint">@T["Whether multiple media can be selected."]</span>
    </div>
</div>

<div class="mb-3 col-md-6">
    <div class="form-check">
        <input type="checkbox" class="form-check-input" asp-for="AllowMediaText" checked="@Model.AllowMediaText">
        <label class="form-check-label" asp-for="AllowMediaText">@T["Allow Media Text"]</label>
        <span class="hint">@T["Whether alternate text can be defined for media."]</span>
    </div>
</div>

<div class="mb-3 col-md-6">
    <div class="form-check">
        <input type="checkbox" class="form-check-input" asp-for="LazyLoad" checked="@Model.LazyLoad">
        <label class="form-check-label" asp-for="LazyLoad">@T["Lazy Load"]</label>
        <span class="hint">@T["Whether media should be lazy loaded."]</span>
    </div>
</div>

<div class="mb-3">
    <div class="w-md-50 pe-md-3">
        <label asp-for="Hint">@T["Hint"]</label>
        <textarea asp-for="Hint" rows="2" class="form-control"></textarea>
        <span class="hint">@T["The hint text to display for this field on the editor."]</span>
    </div>
</div>

@if (Model.IsConfigured)
{
<div class="responsive-media-field-editor" id="@Html.IdFor(m => m)" data-for="@Html.IdFor(m => m.FallbackData)">
    <div class="responsive-media-field">
        <div class="mb-3">
            <label asp-for="FallbackData">Fallback Image</label>
            <span class="hint">Displayed when image hasn't been defined on content field.</span>

            <input asp-for="FallbackData" type="hidden" :value="value" data-init="@Model.FallbackData" />

            <nav class="responsive-media-field-toolbar mb-3">
                <div class="btn-group">
                    <button type="button" class="btn btn-secondary btn-sm" v-on:click="add" :disabled="!canAdd"><span class="fa fa-plus"></span></button>
                </div>
            </nav>

            <draggable :list="mediaItems" tag="ol" class="row media-items-grid" v-if="hasMedia">
                <div class="col-sm-3" v-for="(item, index) in mediaItems">
                    <responsive-media-item v-bind:media="item" v-bind:breakpoints="breakpoints" v-on:remove="remove" v-on:update="update" />
                </div>
            </draggable>
        </div>
    </div>
</div>

<div class="modal" id="@Html.IdFor(m => m)-ModalBody">
    <div class="modal-dialog modal-lg media-modal" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@T["Select Media"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body"></div>

            <div class="modal-footer">
                <button type="button" class="btn btn-primary mediaFieldSelectButton">@T["OK"]</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@T["Cancel"]</button>
            </div>
        </div>
    </div>
</div> 
}
else
{
    <div class="alert alert-warning" role="alert">@T["You'll be able to define default image once breakpoints have been added."]</div>
}
